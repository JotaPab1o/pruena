/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.conectar;
import Vista.Editarmatriz;
import java.awt.Color;

import java.sql.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;




public final class Muestras extends javax.swing.JFrame {

    static int nregistro =0;
    static String identificacion;
    static java.util.Date fechaIngreso;
    static java.util.Date fechaMuestreo;
    static String fk_laboratorios;
    static int nsota;
    static int informe_loq;
    static String observaciones;
    static int idMuestras;
    
    int fila;
     ResultSet result;
    static int idMatriz;
    
   static String cliente;
  static  String matriz;
  static  int informeLoq;
  
  
    /**
     * Creates new form Muestras
     * @throws java.sql.SQLException
     */
    public Muestras() throws SQLException {
        initComponents();
        llamarMuestra();
        llenarMatriz();
        llenarCliente();
        btnSalir.setBackground(Color.BLUE); 
       
       
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = tblDatos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        ;
        btnAgregar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbMatriz = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnEliminar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cmbCliente = new javax.swing.JComboBox<>();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblDatos.setEditingColumn(0);
        tblDatos.setEditingRow(0);
        tblDatos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblDatosFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblDatosFocusLost(evt);
            }
        });
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblDatosMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblDatosMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        btnAgregar.setText("AGREGAR MUESTRA");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jLabel5.setText("Matriz");

        jLabel3.setText("Cliente");

        cmbMatriz.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cmbMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMatrizActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Matriz");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Informaci√≥n Muestras");

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jButton3.setText("EDITAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cmbCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));

        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setText("FINALIZAR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSalir)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1006, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cmbMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(198, 198, 198)
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(cmbMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton3)
                        .addGap(26, 26, 26)
                        .addComponent(btnEliminar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

     
     
       if(validacionMatriz()){
        
        conectar cc= new conectar();
    Connection cn= cc.conexion();
        String ins="INSERT INTO matrices (fk_clientes, nombre) VALUES(?,?)";
        try {
                        PreparedStatement pst = cn.prepareStatement(ins);
                        pst.setInt(1, cmbCliente.getSelectedIndex());
                        pst.setString(2, (String) cmbMatriz.getSelectedItem());   
                        
                int n= pst.executeUpdate();
                pst.close();
                 if(n>0)
            {
                
                JOptionPane.showMessageDialog(this, "Se guardaron los datos");
   
                        Ingresomatriz VentNvoPres = new Ingresomatriz(); //termina if
                        VentNvoPres.setVisible(true);
                        Ventanamuestra=true;     
            }
                 
            else
            {
                JOptionPane.showMessageDialog(this, "Error");
            }
        } catch (Exception e) {
             Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, e);
        }       
    }
       else{
           
              JOptionPane.showMessageDialog(this, "Ingresa datos para ingresar matriz");
              
               }              
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        if(validacionSeleccionarfila()){
            JOptionPane.showMessageDialog(this, "Selecciona una fila");
              
        }
        else{
            
    //    JOptionPane.showConfirmDialog(null, "¬øDesea eliminar fila seleccionada?", "S√ç", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);   
        conectar cc= new conectar();
        Connection cn= cc.conexion();
               
       // String query = ("DELETE FROM muestras WHERE nregistro = '"+fila+"'AND fk_matrices = '"+idMatriz+"'");
           
       
            String query =  "DELETE FROM analisis WHERE fk_idmuestras = '"+idMuestras+"'";
       try {
                 PreparedStatement pst = cn.prepareStatement(query);
                    int n= pst.executeUpdate();
               //     pst.close();
               try { 
                 query =  "DELETE FROM muestras WHERE idMuestras = '"+idMuestras+"'";
     
                 PreparedStatement pst2 = cn.prepareStatement(query);
                    int n2= pst2.executeUpdate();
               //     pst.close();
                    } catch (Exception e) {
                Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, e);
        }
               
                System.out.println("tabla eliminada");
                                llamarMuestra();
            } catch (Exception e) {
                Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed
 }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        
        if( validacionSeleccionarfila()){
            JOptionPane.showMessageDialog(this, "Selecciona una fila");
 
        }
        
        else{
            
            obtenerDatosEditar();    
            Editarmatriz jFrame;
            try {
                jFrame = new Editarmatriz();
                jFrame.setVisible(true); 
            } catch (SQLException ex) {
                Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
       
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
    
      
       
    }//GEN-LAST:event_tblDatosMouseClicked

    private void cmbMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMatrizActionPerformed

    }//GEN-LAST:event_cmbMatrizActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        try {
            dispose();
            cn.close();// TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void tblDatosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseReleased
           obtenerDatosEditar();      // TODO add your handling code here:
    }//GEN-LAST:event_tblDatosMouseReleased

    private void tblDatosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseEntered
              try {
            llamarMuestra();
      
        } catch (SQLException ex) {
            Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblDatosMouseEntered

    private void tblDatosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblDatosFocusGained
      
   
    }//GEN-LAST:event_tblDatosFocusGained

    private void tblDatosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblDatosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tblDatosFocusLost

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Muestras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Muestras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Muestras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Muestras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Muestras().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Muestras.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
          
  public  void obtenerFila(){
        
         DefaultTableModel modelo = (DefaultTableModel)tblDatos.getModel();
            fila = tblDatos.getSelectedRow();
            fila = (int) modelo.getValueAt(fila,0);
            System.out.println(fila);
    }
  
  
    private void llenarMatriz(){
            String cmb= "SELECT * FROM listamatrices";
        try {
            Statement st=cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()){
                // rellena el combobox a partir de la consulta
                cmbMatriz.addItem(set.getString("nombre"));
            }  //<cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }   
    }
    
  public void llamarMuestra() throws SQLException{
                    conectar cc= new conectar();
                    Connection cn= cc.conexion();
                DefaultTableModel modelo  = new DefaultTableModel();
                JTable tabla = new JTable(modelo);
                String query = ("SELECT m.idMuestras, m.nregistro, c.nombre, ma.nombre ,m.identificacion ,m.fechaMuestreo , m.fechaIngreso,l.nombre, m.nsota, m.observaciones, ma.id_matrices \n" +
                                "FROM muestras m \n" +
                                "INNER JOIN laboratorios l \n" +
                                "	ON m.fk_laboratorios = l.idLaboratorios\n" +
                                "INNER JOIN matrices ma\n" +
                                "	ON m.fk_matrices = ma.id_matrices\n" +
                                "INNER JOIN clientes c\n" +
                                "	ON ma.fk_clientes = c.idClientes");
                PreparedStatement pst = cn.prepareStatement(query);
                ResultSet ResultSet = pst.executeQuery();
                modelo.setColumnIdentifiers(new Object[]{"Id Muestra","Numero Registro","Cliente", "Matriz", "Identificacion", "Fecha Muestreo", "Ingreso Laboratorio", "Analisis Solicitado",
                    "Laboratorio Ejecutante", "Numero Sota","observaciones", "Idmatrices"});
                System.out.println("INGRESO");
                try {
                    while(ResultSet.next()){
                            int a = ResultSet.getInt("idMuestras");
                            
                        
                            
                        modelo.addRow(new Object[]{ResultSet.getInt("idMuestras"),ResultSet.getInt("nregistro"), ResultSet.getString("c.nombre"), ResultSet.getString("ma.nombre"),
                            ResultSet.getString("identificacion"),ResultSet.getDate("fechaMuestreo"),ResultSet.getDate("fechaIngreso"),Listaanalisis(a),
                            ResultSet.getString("l.nombre"),ResultSet.getInt("nsota"),ResultSet.getString("observaciones"), ResultSet.getInt("ma.id_matrices")});
                       }
                        tblDatos.setModel(modelo );
                tblDatos.getColumnModel().getColumn(0).setMaxWidth(0);
                tblDatos.getColumnModel().getColumn(0).setMinWidth(0);
                tblDatos.getColumnModel().getColumn(0).setPreferredWidth(0);        
                        tblDatos.getColumnModel().getColumn(11).setMaxWidth(0);
                        tblDatos.getColumnModel().getColumn(11).setMinWidth(0);
                        tblDatos.getColumnModel().getColumn(11).setPreferredWidth(0);        
                        
                       
                    } catch (SQLException e) {
                    System.out.println("error");
     }
}  
    String Listaanalisis(int a) throws SQLException{
      
 
       String c="";
      
       int numero = 56;
                conectar cc= new conectar();
                Connection cn= cc.conexion();
               
                String query = ("SELECT * FROM analisis WHERE fk_idmuestras ='"+a+"'");
             
                PreparedStatement pst = cn.prepareStatement(query);
                ResultSet ResultSet = pst.executeQuery();
             
                try {
                    while(ResultSet.next()){

                        String a1 =  ResultSet.getString("nombre");
                        
                        c = c+""+a1+",";

                        System.out.println(a1);
                        
                       }
                    } catch (SQLException e) {
                    System.out.println("no se pudo");
     
     }
               cn.close();
        return c;
            
   }

 public void obtenerDatosEditar(){
    
     
     
     DefaultTableModel modelo = (DefaultTableModel)tblDatos.getModel();
     int selectRowIndex = tblDatos.getSelectedRow();
        idMuestras = (int) modelo.getValueAt(selectRowIndex, 0);
        nregistro = (int) modelo.getValueAt(selectRowIndex,1);
        cliente = (String) modelo.getValueAt(selectRowIndex, 2);
        matriz = (String) modelo.getValueAt(selectRowIndex, 3);
        identificacion = (String) modelo.getValueAt(selectRowIndex, 4);
        fechaMuestreo = (Date) modelo.getValueAt(selectRowIndex, 5);
        fechaIngreso = (Date) modelo.getValueAt(selectRowIndex, 6);
        fk_laboratorios = (String) modelo.getValueAt(selectRowIndex, 8);
        nsota = (int) modelo.getValueAt(selectRowIndex, 9);
         observaciones = (String) modelo.getValueAt(selectRowIndex, 10);
        idMatriz = (int) modelo.getValueAt(selectRowIndex, 11);
        System.out.println("catch");

 }
 
     private void llenarCliente(){
            String cmb= "SELECT * FROM clientes";
        try {
            Statement st=cn.createStatement();
            ResultSet set = st.executeQuery(cmb);
            // Bucle while para la consulta
            while (set.next()){
                // rellena el combobox a partir de la consulta
                cmbCliente.addItem(set.getString("nombre"));
            }  cn.close();

        } catch (SQLException e) {
            System.err.println("error consulta");
        }   
    }
     
     boolean validacionMatriz(){
         
       String cliente =  (String) cmbCliente.getSelectedItem();
       String matriz = (String) cmbMatriz.getSelectedItem();
  //     String informeLoq = txtLoq.getText();
       
       if(cliente =="Seleccione..."||matriz == "Seleccione..."){
           
             return false;    
          
       }
       else{
           return true;
       }  
     }
     
     boolean validacionSeleccionarfila(){
         
         if(nregistro<=0){
             
              return true; 
         }else{

            return false;
        }

     }
     
     boolean ventanaEditarAbierta(){
     
         if(Ventanamuestra==false){
    Ingresomatriz11 VentNvoPres = new Ingresomatriz11(); //termina if
    VentNvoPres.setVisible(true);
    Ventanamuestra=true;
    
    return true;
           }
           else{
              JOptionPane.showMessageDialog(null,"La ventana MUESTRAS ya esta abierta");
             return false;
         }  
     }
     
   public static boolean Ventanamuestra=false;
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbCliente;
    private javax.swing.JComboBox<String> cmbMatriz;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tblDatos;
    // End of variables declaration//GEN-END:variables
         conectar cc= new conectar();
    Connection cn= cc.conexion();

  }
